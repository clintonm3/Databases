EXERCISES

1. Write out a generic SELECT statement.
A:
SELECT <column1, column2, ... *>
    FROM <table1, table2 ...>
    <optional: WHERE <condition>>

2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.
A: Searching Collects, Frenzied Turtles, Working Closely

3. Given this dogs table, write queries to select the following pieces of data:
Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").
A: WHERE columnName LIKE '%string%';

Display the name, gender, and age of all dogs that are part Labrador.
A:
SELECT name, gender, age
FROM dogs
WHERE breed LIKE %labrador%;

Display the ids of all dogs that are under 1 year old.
A:
SELECT id
FROM dogs
WHERE age <1;

Display the name and age of all dogs that are female and over 35lbs.
A:
SELECT name, age
FROM dogs
WHERE gender = 'F' AND weight > 35;

Display all of the information about all dogs that are not Shepherd mixes
A:
SELECT name, gender, age
FROM dogs
WHERE breed NOT LIKE '%shepherd%';

Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.
A:
SELECT id, age, weight breed
FROM dogs
WHERE breed LIKE '%dane%' OR weight > 60;

4. Given this cats table, what records are returned from these queries?
SELECT name, adoption_date FROM cats;
A:
Mushi	2016-03-22T00:00:00.000Z
Seashell	null
Azul	2016-04-17T00:00:00.000Z
Victoire	2016-09-01T00:00:00.000Z
Nala	null

SELECT name, age FROM cats;
A:
Mushi	1
Seashell	7
Azul	3
Victoire	7
Nala	1

5. From the cats table, write queries to select the following pieces of data.
Display all the information about all of the available cats.
A:
SELECT *
FROM cats;

Choose one cat of each age to show to potential adopters.
A:
SELECT max(name), age
FROM cats
GROUP BY age;

Find all of the names of the cats, so you don’t choose duplicate names for new cats.
A:
SELECT name
FROM cats
GROUP BY name;

6. List each comparison operator and explain when you would use it. Include a real world example for each.
A:
=	Equal	test for equality -- WHERE id = 500
<>	Not Equal	test for inequality --	WHERE name <> 'Bob'
!=	Not Equal	test for inequality --	WHERE name != 'Bob'
>	Greater Than	test for an expression greater than --	WHERE customerId > 200
>=	Greater Than or Equal	test for greater than or equal -- WHERE customerId >= 200
<	Less Than	test for an expression less than --	WHERE customerId < 3
<=	Less Than or Equal	test for less than or equal --	WHERE customerId <= 3
IN ( )	Match values in list test expression for matched value in a list of values --	WHERE supplierName IN ('Apple', 'Microsoft')
NOT	Negates a condition	negate a condition --	WHERE productName NOT IN ('chair', 'couch', 'bed')
BETWEEN	Within a range (inclusive)	test if an expression is within a range of values (inclusive) --	WHERE productId BETWEEN 5 AND 15
IS NULL	NULL value	returns TRUE if a NULL value, otherwise returns FALSE --	WHERE productId IS NULL
IS NOT NULL	Non-NULL value	returns TRUE if a non-NULL value, otherwise it returns FALSE --	WHERE productId IS NOT NULL
LIKE	Pattern matching with % and _	use wildcards to perform pattern matching --	WHERE firstName LIKE 'J%'
EXISTS	Condition met if at least one row	subquery returns at least one row --	WHERE EXISTS (SELECT *, FROM orders, WHERE cust_id = ord_id)

7. From the cats table, what data is returned from these queries?
SELECT name FROM cats WHERE gender = ‘F’;
A: Query Error: error: column "‘f’" does not exist
(w/ "F")
Seashell
Nala

SELECT name FROM cats WHERE age <> 3;
A:
Mushi
Seashell
Victoire
Nala

SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;
A:
Query Error: error: column "‘mushi’" does not exist
(w/ "Mushi" & "M")
3
4
