EXERCISES

1. What are some pros and cons of using linked lists instead of arrays?

A: Pros of using linked lists are that we dynamically instantiate every node so our list never contains empty placeholders and that each node is independent in memory which allows them to easily grow to large sizes. Cons of linked lists include the fact that in can be inefficient to access an element within a list due to each node being able to exist anywhere in physical memory.  Linked lists are also linear in nature, so you may have to travel further in order to access an element.

2. Come up with a real world example of a linked list.

A: A train is a real world example where each train car is linked in a specific order so that they can be loaded, unloaded, dropped off and picked up in the most efficient manner possible.

PROGRAMMING QUESTIONS

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

A:

LinkedList.prototype.push = function(element) {
  SET node = {
    value: element,
    next: null
  }

  IF the head node does not exist
    THEN SET head to node
  ELSE
    SET current node to head
    WHILE current.next
      current node = current.next
    END WHILE
    SET current.next to node
  END IF
  }
}

2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d
A:

class LinkedList {
  constructor(...values) {
    this.head = null;
    this.length = 0;
    this.addToHead(...values);
  }

  addSingleItemToHead(value) {
    const newNode = { value };
    newNode.next = this.head;
    this.head = newNode;
    this.length++;
  }

  addToHead(...values) {
    values.forEach(value => this._addSingleItemToHead(value));
    return this;
  }

  removeDuplicates() {
    if (!this.head || !this.head.next) {
      return;
    }

    var thisNode = this.head;
    while (thisNode != null) {
      var previousNode = thisNode;
      var nextNode = thisNode.next;
      while (nextNode != null) {
        if (thisNode.value == nextNode.value) {
          previousNode.next = nextNode.next;
      this.length --;
         } else {
             previousNode = nextNode;
         }
         nextNode = nextNode.next;
      }
      thisNode = thisNode.next;
    }
return this;
}

showAllElements() {
  if (this.head == null) return;
  var thisNode = this.head,
    i = 1;
  while (thisNode.next != null) {
    console.log('The element at position ' + i + ' has value ' + thisNode.value);
    thisNode = thisNode.next;
    i++;
  }
  console.log('The element at position ' + i + ' has value ' + thisNode.value);
}
}

var multipleDuplicates = new LinkedList();
multipleDuplicates.addToHead(1, 7, 9, 3, 4, 6, 3, 7);
multipleDuplicates.removeDuplicates();
multipleDuplicates.showAllElements();



3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a
A:


class LinkedList {
  constructor(...values) {
    this.head = null;
    this.length = 0;
    this.addToHead(...values);
  }

  addSingleItemToHead(value) {
    const newNode = { value };
    newNode.next = this.head;
    this.head = newNode;
    this.length++;
  }

  addToHead(...values) {
    values.forEach(value => this.addSingleItemToHead(value));
    return this;
  }

  reverseLinkedList() {
    if (!this.head || !this.head.next) {
      return;
    }

    var previousNode = null;
    var thisNode = this.head;
    var nextNode;

    while (thisNode) {
      nextNode = thisNode.next;
      thisNode.next = previousNode;
      previousNode = thisNode;
      thisNode = nextNode;
    }

    this.head = previousNode;
  }

  showAllElements() {
    if (this.head == null) return;
    var thisNode = this.head,
      i = 1;
    while (thisNode.next != null) {
      console.log('The element at position ' + i + ' has value ' + thisNode.value);
      thisNode = thisNode.next;
      i++;
    }
    console.log('The element at position ' + i + ' has value ' + thisNode.value);
  }
}
 
var reverseMe = new LinkedList();
reverseMe.addToHead(4, 5, 7, 9);
reverseMe.reverseLinkedList();
reverseMe.showAllElements();
