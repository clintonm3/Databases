EXERCISES

1. How do you find related data held in two separate data tables?

A: Using a JOIN clause.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

A: An INNER JOIN gets records that have matching values in both tables.  A LEFT OUTER JOIN returns all records from the left table and the matching records from the right table.  A RIGHT OUTER JOIN returns all records from the right table and the matching records from the left table.

INNER JOIN EXAMPLE:
SELECT Orders.OrderID, Customers.CustomerName
FROM Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

LEFT OUTER JOIN EXAMPLE:
SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;

RIGHT OUTER JOIN EXAMPLE:
SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;

3. Define primary key and foreign key. Give a real-world example for each.

A: Primary key is a unique identifier for each row in a database table. All tables should contain a primary key in order to access the data in each row.  A foreign key is the primary key of one table that is included as a non-unique attribute in another table.  Foreign key allows you to link two tables.

4. Define aliasing.

A: A technique of creating short variable names, usually a single letter, to replace the table name in a query.

5. Change this query so that you are using aliasing:
A:
SELECT p.name, c.salary, c.vacation_days
FROM professor AS p
JOIN compensation AS c
ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.

A: For a shortcut to using USING and is the method for implicitly joining tables base on shared columns.
EXAMPLE:
SELECT *
FROM foods
NATURAL JOIN company;
//This would join all items from the food table with a company_id column with all items in the company table with the same company_id.


7. Using this Employee schema and data, write queries to find the following information:
List all employees and all shifts.

A:
SELECT employees.name, shifts.date, shifts.start_time, shifts.end_time
FROM scheduled_shifts
INNER JOIN employees
ON employees.id = scheduled_shifts.employee_id
INNER JOIN shifts
ON shifts.id = scheduled_shifts.shift_id
ORDER BY shifts.date ASC,
  shifts.start_time ASC;

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:
Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
A:
SELECT first_name, last_name, dogs.name
FROM volunteers
LEFT OUTER JOIN dogs
ON dogs.id = volunteers.foster_dog_id;

The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.
A:
SELECT cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
FROM cat_adoptions
INNER JOIN cats
ON cats.id = cat_adoptions.cat_id
INNER JOIN adopters
ON adopters.id = cat_adoptions.adopter_id
GROUP BY cats.name, adopters.first_name, adopters.last_name, cat_adoptions.date
HAVING cat_adoptions.date >= current_date - 30;

Create a list of adopters who have not yet chosen a dog to adopt.
A:
SELECT first_name, last_name, dogs.name
FROM volunteers
LEFT JOIN dogs
ON dogs.id = volunteers.foster_dog_id
WHERE volunteers.foster_dog_id IS NULL;

Lists of all cats and all dogs who have not been adopted.
A:
SELECT name
FROM dogs
LEFT JOIN dog_adoptions
ON dogs.id = dog_adoptions.dog_id
WHERE dog_adoptions.dog_id IS NULL;

SELECT name
FROM cats
LEFT JOIN cat_adoptions
ON cats.id = cat_adoptions.cat_id
WHERE cat_adoptions.cat_id IS NULL;

The name of the person who adopted Rosco.
A:
SELECT first_name, last_name
FROM adopters
INNER JOIN dog_adoptions
ON adopters.id = dog_adoptions.adopter_id
WHERE dog_adoptions.dog_id = 10007;

9. Using this Library schema and data, write queries applying the following scenarios and include the results:
To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".
A:
SELECT patrons.name, holds.rank
FROM holds
INNER JOIN patrons
ON holds.patron_id = patrons.id
WHERE holds.isbn = '9136884926'
ORDER BY holds.rank ASC;

List all of the library patrons. If they have one or more books checked out, list the books with the patrons.
A:
SELECT patrons.name,
MAX((CASE WHEN books.title IN (SELECT title FROM books WHERE transactions.checked_in_date IS NULL) THEN books.title ELSE NULL END))
FROM patrons
INNER JOIN transactions ON transactions.patron_id = patrons.id
INNER JOIN books ON books.isbn = transactions.isbn
GROUP BY patrons.name;
