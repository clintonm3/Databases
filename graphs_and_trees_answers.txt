EXERCISES

1. What is a binary tree and what makes it unique to other trees?

A:  A data structure in which each Node may point to a left child and a right child.  A Binary tree has their root node at the top and they grow downwards where a node may have up to two child nodes; a left node and a right node.

2. What is a heuristic?

A:  A heuristic is a guess than an algorithm makes to solve a complex problem sooner by sacrificing accuracy.

3. What is another problem besides the shortest-path problem that requires the use of heuristics?

A:  Heuristics can simply be used in every day judgement making.  That being, every time you make a decision you may make guesses in order to solve the problem sooner which may in turn decrease accuracy.

4. What is the difference between a depth-first search and a breadth-first search?

A: A DFS starts at the root and explores as far as possible along each branch before backtracking. A BFS explores each node in a row before moving down to the next row.

5. Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: A Unidirected graph is a graph that can move both ways.  An a-cyclic graph is one that can not loop.  An unweighted graph is one whose cost is not assigned within travel between nodes.

6. What kind of graph is a binary search tree?

A: A binary search tree could be classified as a undirected graph due to the nature of connection between nodes and the flow of BFS/DFS.

PROGRAMMING QUESTIONS

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

A:

class Node {
	constructor(data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class BinarySearchTree {
	constructor() {
		this.root = null;
	}

	contains(data) {
		var found = false;
		var thisNode = this.root;
		while (!found && thisNode) {
			if (data < thisNode.data) {
				thisNode = thisNode.left;
			} else if (data > thisNode.data) {
				thisNode = thisNode.right;
			} else {
				found = true;
			}
		}
		return found;
	}

	insert(data) {
		var newNode = new Node(data);
		if (this.root === null) {
			this.root = newNode;
			this.length++;
		} else {
			this.insertNode(this.root, newNode);
		}
	}

	insertNode(node, newNode) {
		if (newNode.data < node.data) {
			if (node.left === null) {
				node.left = newNode;
				this.length++;
			} else {
				this.insertNode(node.left, newNode);
			}
		} else {
			if (node.right === null) {
				node.right = newNode;
				this.length++;
			} else {
				this.insertNode(node.right, newNode);
			}
		}
	}
}

var BST = new BinarySearchTree();

BST.insert(22);
BST.insert(56);
BST.insert(9);
BST.insert(143);
BST.insert(8);
BST.insert(2);
BST.insert(6);
BST.insert(43);
BST.insert(68);

console.log(BST.contains(8)); // returns true
console.log(BST.contains(55)); // returns false
console.log(BST.contains(43)); // returns true

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

A:

class Node {
	constructor(data) {
		this.data = data;
		this.left = null;
		this.right = null;
	}
}

class BinarySearchTree {
	constructor() {
		this.root = null;
	}

	findDistanceBetweenTwoNodes(root, n1, n2) {
		var lowestCommonAncestor = this.findCommonAncestor(root, n1, n2);
		var distanceNode1ToRoot = this.countAncestors(lowestCommonAncestor, n1);
		var distanceNode2ToRoot = this.countAncestors(lowestCommonAncestor, n2);
		var distanceRootToAncestor = this.countAncestors(root, lowestCommonAncestor);
		var totalDistance = (distanceNode1ToRoot + distanceNode2ToRoot) - (2 * distanceRootToAncestor);
		return ('The distance between node ' + n1 + ' and node ' + n2 + ' is ' + totalDistance);
	}

	findCommonAncestor(root, n1, n2) {
		if (!root) return;
		var lowestCommonAncestor = root.data;
		if (n1 === lowestCommonAncestor || n2 === lowestCommonAncestor) {
			return lowestCommonAncestor;
		}
		if (n1 < lowestCommonAncestor && n2 < lowestCommonAncestor) {
			return this.findCommonAncestor(root.left, n1, n2);
		}
		if (n1 > lowestCommonAncestor && n2 > lowestCommonAncestor) {
			return this.findCommonAncestor(root.right, n1, n2);
		}
		return lowestCommonAncestor;
	}

	countAncestors(root, data) {
		let thisNode = this.root;
		let nodeCount = 0;
		while (thisNode) {
			if (data === thisNode.data) {
				return nodeCount;
			}
			thisNode = data < thisNode.data ? thisNode.left : thisNode.right;
			nodeCount++;
		}
	}

	getRootNode() {
		return this.root;
	}

	insert(data) {
		var newNode = new Node(data);
		if (this.root === null) {
			this.root = newNode;
			this.length++;
		} else {
			this.insertNode(this.root, newNode);
		}
	}

	insertNode(node, newNode) {
		if (newNode.data < node.data) {
			if (node.left === null) {
				node.left = newNode;
				this.length++;
			} else {
				this.insertNode(node.left, newNode);
			}
		} else {
			if (node.right === null) {
				node.right = newNode;
				this.length++;
			} else {
				this.insertNode(node.right, newNode);
			}
		}
	}
}

var BST = new BinarySearchTree();

BST.insert(22);
BST.insert(3);
BST.insert(4);
BST.insert(56);
BST.insert(8);
BST.insert(9);
BST.insert(17);
BST.insert(34);
BST.insert(5);

var root = BST.getRootNode();
console.log(BST.findDistanceBetweenTwoNodes(root, 56, 17));
